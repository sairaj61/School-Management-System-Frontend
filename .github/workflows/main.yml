name: Build and Deploy Frontend to EC2

on:
  push:
    branches:
      - main  # Adjust if needed

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout frontend code
        uses: actions/checkout@v4

      - name: Build frontend Docker image
        run: |
          docker build -t school-frontend:latest .

      - name: Save image to tar file
        run: |
          docker save school-frontend:latest -o frontend.tar

      - name: Set up SSH agent
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.EC2_KEY }}

      - name: Transfer tar to EC2 frontend server
        run: |
          scp -o StrictHostKeyChecking=no frontend.tar ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST_FE }}:/home/${{ secrets.EC2_USER }}/frontend.tar

      - name: Load and run container on frontend EC2 with BACKEND_URL
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST_FE }} << 'EOF'
            set -e

            echo "ðŸ“¦ Loading Docker image..."
            docker load -i frontend.tar
            source /etc/environment
            echo "âœ… Using BACKEND_URL: ${BACKEND_URL}"
            echo "ðŸ›‘ Stopping and removing existing container..."
            docker stop school-frontend || true
            docker rm school-frontend || true

            echo "ðŸš€ Running new frontend container with BACKEND_URL=\$BACKEND_URL"
            docker run -d \
              --name school-frontend \
              -e BACKEND_URL=\$BACKEND_URL \
              -p 80:80 \
              --restart unless-stopped \
              school-frontend:latest

            echo "ðŸ§¹ Cleaning up frontend.tar..."
            rm frontend.tar

            echo "ðŸ§½ Cleaning up unused Docker resources..."

            # Remove exited containers
            docker container prune -f

            # Remove dangling/untagged images (e.g., <none>)
            docker image prune -f

            # Optionally clean volumes/networks if needed
            # docker volume prune -f
            # docker network prune -f

            echo "âœ… Cleanup complete."
          EOF
